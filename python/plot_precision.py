"""
plot_precision.py

Equal weights different variance, different weights equal variance.

Load and plot data generated by precision.py.
"""
import json
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import wilcoxon # Statistical comparison between groups

import simulation_utilities as simutils
import dict_key_definitions as keydefs
from dict_key_definitions import statskeys, simkeys
from dict_key_definitions import precision_reskeys as reskeys
from test_utilities import circmean

reskeys = keydefs.constkeys_precision_experiment_result_dict()
statskeys = keydefs.constkeys_summary_stats_dict()
if __name__ == "__main__":
    plt.rcParams["svg.fonttype"] = 'none' # Embed text objects in SVGs
    
    # Load stats data from file
    with open("data_out/precision_stats.json") as f:
        stats = json.load(f)

    # Load simulation metadata
    with open("data_out/precision_meta.json") as f:
        meta = json.load(f)

    fig = plt.figure("Precision experiments", figsize=(12,5))
    fig.suptitle("Changes in precision when adding or removing a cue")
    axs = fig.subplot_mosaic([[reskeys.exp1,reskeys.exp2,reskeys.exp3,reskeys.exp4],
                              [reskeys.exp5,reskeys.exp6,reskeys.exp7,reskeys.exp8]],
                             sharey=True,
                             sharex=True
    )

    titles = dict()
    titles[reskeys.exp1] = "E1: add unreliable"
    titles[reskeys.exp2] = "E2: add reliable"
    titles[reskeys.exp3] = "E3: remove unreliable"
    titles[reskeys.exp4] = "E4: remove reliable"
    titles[reskeys.exp5] = "E5: add unreliable"
    titles[reskeys.exp6] = "E6: add reliable"
    titles[reskeys.exp7] = "E7: remove unreliable"
    titles[reskeys.exp8] = "E8: remove reliable"

    # Generate a boxplot for each experiment
    bg_artists = []
    bg_labels = []
    box_artists = []
    box_labels = []
    for jdx in range(len(reskeys.expkeys())):
        k = reskeys.expkeys()[jdx]
        # Statistics data-structure format defined in simulation_utilities.py
        # in the summary_statistics function
        initial_exits = stats[k][reskeys.initial][statskeys.exit_angles]
        test_exits = stats[k][reskeys.test][statskeys.exit_angles]

        # Exit angles are given as one list for each agent. The size of those
        # lists will vary but the same number of agents should be present in the
        # initial and test conditions.
        # Round all agent exit angles to the nearest five degrees.
        for idx in range(len(initial_exits)):
            initial_exits[idx] = np.radians(
                np.around(np.degrees(initial_exits[idx])/5, decimals=0)*5
            )

            test_exits[idx] = np.radians(
                np.around(np.degrees(test_exits[idx])/5, decimals=0)*5
            )

        initial_mean_vector_lengths = np.array([ circmean(x)[0] for x in initial_exits ])
        test_mean_vector_lengths = np.array([ circmean(x)[0] for x in test_exits ])

        # Replicate biological stats analysis (Wilcoxon signed-rank or paired
        # Wilcoxon test).
        stat, p_value = wilcoxon(initial_mean_vector_lengths,
                                 test_mean_vector_lengths)



        boxcolour='k'
        blues = [reskeys.exp1, reskeys.exp2, reskeys.exp5, reskeys.exp6]
        wbr = [reskeys.exp1, reskeys.exp2, reskeys.exp3, reskeys.exp4]
        facecol = "#9EB6D1" if k in blues else "#FFECC0"
        bgcolour = 'tab:purple' if k in wbr else 'tab:cyan'
        bglabel = None

        if k == reskeys.exp1:
            bglabel = "weight-by-reliability"
        elif k == reskeys.exp5:
            bglabel = "weight-by-contrast"

        bg = axs[k].fill_between(np.linspace(0,3), 0, 1,
                                 color=bgcolour, alpha=0.15, zorder=0)
        if k == reskeys.exp1 or k == reskeys.exp5:
            bg_labels.append(bglabel)
            bg_artists.append(bg)

        boxlabel = None
        if k == reskeys.exp1:
            boxlabel = "Add cue"
        elif k == reskeys.exp3:
            boxlabel = "Remove cue"

        box_dict = axs[k].boxplot([initial_mean_vector_lengths, test_mean_vector_lengths],
                                  showfliers=True,
                                  sym=".",
                                  patch_artist=True,
                                  boxprops=dict(facecolor=facecol, color=boxcolour),
                                  capprops=dict(color=boxcolour),
                                  whiskerprops=dict(color=boxcolour),
                                  medianprops=dict(color=boxcolour),
                                  zorder=1,
                                  widths=0.5
        )

        p_string = "n.s."
        if p_value <= 0.05: # If minimally signficant, iterate.
            sig_levels = [0.05, 0.01, 0.001, 0.0001, 0.00001]
            max_significance = max(sig_levels)
            for s in sig_levels:
                if p_value < s:
                    max_significance = s

            p_string = "$p < {}$".format(max_significance)

        axs[k].text(2.9, 0.03, p_string,ha="right")

        if k == reskeys.exp1 or k == reskeys.exp3:
            box_labels.append(boxlabel)
            box_artists.append(box_dict["boxes"][0])

        axs[k].set_ylim([0,1])
        axs[k].set_xlim([0,3])
        axs[k].set_title(titles[k])
        axs[k].set_aspect(2.8)


        if jdx >= 4:
            axs[k].set_xticks([1,2])
            axs[k].set_xticklabels([reskeys.initial, reskeys.test])


    axs[reskeys.exp1].set_ylabel("Mean vector length")
    axs[reskeys.exp5].set_ylabel("Mean vector length")

    # Include explicit labels for strategy
    # axs[reskeys.exp1].text(1.5, 0.1, "weight-by-reliability", ha='center', va='bottom')
    # axs[reskeys.exp5].text(1.5, 0.1, "weight-by-strength", ha='center', va='bottom')

    labels = bg_labels + box_labels
    artists = bg_artists + box_artists
    fig.legend(bg_artists,
               bg_labels,
               ncols=8,
               prop={'size':8},
               loc=10,
               bbox_to_anchor=(0.5, 0),
               bbox_transform=fig.transFigure)

    fig.legend(box_artists,
               box_labels,
               ncols=8,
               prop={'size':8},
               loc=10,
               bbox_to_anchor=(0.5, -0.06),
               bbox_transform=fig.transFigure)

    plt.savefig("plots/boxplots.svg", bbox_inches="tight")
#    plt.show()
